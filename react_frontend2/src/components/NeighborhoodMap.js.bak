import React, { useState, useEffect } from 'react';
import L from 'leaflet';
import { MapContainer, TileLayer, Marker, useMap } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import axios from 'axios';

// Replace with your OpenCage API key
const OPENCAGE_API_KEY = '342dc1e4e90d4c97bca98a0543e592ab';

const AddressMarker = ({ address, coordinates }) => {
  const map = useMap();

  useEffect(() => {
    if (coordinates) {
      map.setView(coordinates, 13); // Zoom in to the location
    }
  }, [coordinates, map]);

  return coordinates ? <Marker position={coordinates} /> : null;
};

const NeighborhoodMap = () => {
  const [address, setAddress] = useState("333 Velarde Avenue, Coral Gables FL");
  const [coordinates, setCoordinates] = useState(null);
  const [inputAddress, setInputAddress] = useState("");
  
  // Geocode the default address when the component loads
  useEffect(() => {
    geocodeAddress(address);
  }, [address]);

  // Geocode the address and get coordinates
  const geocodeAddress = async (addr) => {
    try {
      const response = await axios.get(
        `https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(addr)}&key=${OPENCAGE_API_KEY}`
      );
      const { lat, lng } = response.data.results[0].geometry;
      setCoordinates([lat, lng]);
    } catch (error) {
      console.error('Error geocoding address:', error);
    }
  };

  // Handle address input field change
  const handleAddressInputChange = (e) => {
    setInputAddress(e.target.value);
  };

  // Handle address submission
  const handleAddressSubmit = () => {
    setAddress(inputAddress);
    geocodeAddress(inputAddress);
  };

  // Handle geolocation button
  const handleMyLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setCoordinates([latitude, longitude]);
        },
        (error) => {
          console.error("Geolocation error:", error);
        }
      );
    } else {
      console.error("Geolocation is not supported by this browser.");
    }
  };

  return (
    <div>

      <MapContainer center={[25.7617, -80.1918]} zoom={13} style={{ height: '500px', width: '100%' }}>
        <TileLayer
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          attribution="&copy; OpenStreetMap contributors"
        />
        <AddressMarker address={address} coordinates={coordinates} />
      </MapContainer>
    </div>
  );
};

export default NeighborhoodMap;
